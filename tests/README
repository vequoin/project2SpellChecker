Group Names:
Daksh Pandya - dpp122
Digvijay Singh - ds1982

This README provides an overview of the Spell Checker program. This tool checks text files for spelling errors against a provided dictionary. 
The spell checker is designed to efficiently identify and report misspelled words in text files, leveraging a dictionary for validation. The design focuses on modularity, ease of extension, and efficient handling of different input scenarios. The implementation is split into two main components: dictionary management (dictionary.c) and file processing (file-processing.c).

Dictionary Management (dictionary.c):
- The dictionary component is responsible for loading, searching, and managing a list of correctly spelled words.

- Loading: The dictionary is loaded from a file specified by the user. Each word is read and stored in a dynamically allocated array. This process involves parsing each line of the file and storing each word into an array, ensuring that memory allocation is sufficient and efficient.

- Searching: To determine if a word is correctly spelled, the program searches for it within the loaded dictionary. The search can be performed using either a sequential search or a binary search strategy, depending on the implementation. In the provided code, a sequential search is used, which iterates through the dictionary to find a match. For optimization, a binary search method is also implemented, suitable for large dictionaries, reducing the average search time.

- Case Sensitivity and Variations: The program accommodates different word variations, such as capitalization and possessive forms, through a custom comparison function. This ensures that words like "Apple" and "apple" or "John's" and "johns" are treated appropriately based on dictionary entries.

- Memory Management: Dynamic memory allocation is used for the dictionary to allow flexibility in dictionary size. The program ensures proper memory release after execution to prevent memory leaks.

File Processing (file-processing.c):
- This component handles reading and analyzing text files, identifying potential spelling errors.

- Reading Text: The program reads text from files using buffered I/O for efficiency, handling both small and large files effectively. It parses text into words based on delimiters like spaces and punctuation marks.

- Word Identification: The algorithm identifies words by considering letters, hyphens, and apostrophes as part of words, allowing it to handle a wide range of word formats, including hyphenated words and contractions.

- Error Reporting: For each identified word, the program checks against the dictionary. If a word is not found, it's reported as misspelled, alongside its line and column numbers for easy location.

- Handling Special Cases: The program also deals with special text cases such as trailing punctuation, hyphenated words, and words surrounded by quotation marks or brackets, ensuring accurate word extraction and checking.

- Directory Support: Besides individual files, the program can recursively process directories, checking all text files contained within. This feature allows batch processing of multiple documents for spell checking.

Compilation and Run:
We compile the program using the command: gcc -o spchk mainfile.c dictionary.c file-processing.c -I.
We run the spell checker program using the command: ./spchk dictionary/dict tests/

Test Cases:
  test01Basic Words and Capitalization.txt
  Purpose: Checks the program's ability to recognize basic words and handle different capitalizations.
  Expected Output: All variations of "hello" (e.g., "hello", "Hello", "HELLO") should be recognized as correct if "hello" is in the dictionary.

  test02Trailing Punctuation.txt
  Purpose: Tests the program's ability to ignore punctuation following words.
  Expected Output: Words like "hello," and "world!" should be marked correct if "hello" and "world" are in the dictionary.

  test03Hyphenated Words.txt
  Purpose: Evaluates handling of hyphenated words.
  Expected Output: Words such as "well-being" and "mother-in-law" should be recognized if they are in the dictionary.

  test04Quotation Marks and Brackets.txt
  Purpose: Checks the program's performance with words enclosed in quotation marks and brackets.
  Expected Output: Words like "(world)" and "[test]" should be marked correct based on their root words being in the dictionary.

  test05Line and Column Tracking.txt  
  Purpose: Tests the program's ability to track line and column numbers of identified misspelled words.
  Expected Output: Incorrect words should be reported along with their correct line and column position.

  test06Long Testing for Each.txt
  Purpose: Comprehensive test covering multiple cases in a longer text.
  Expected Output: Various errors should be detected based on the dictionary, including handling of capitalization, punctuation, and hyphenated words.

  testnovelA long Novel.txt and testnovel02A long Novel Two.txt
  Purpose: Tests the program's performance and efficiency with large text files.
  Expected Output: Should correctly identify any misspelled words without excessive processing time.

  tests07Capitalization Sensitivity.txt
  Purpose: Assesses the program's sensitivity to proper nouns and their capitalization.
  Expected Output: Differentiates between proper nouns and common nouns (e.g., "MacDonald" vs. "macdonald") based on the dictionary entries.
